{"version":3,"sources":["components/opening.js","components/questions.js","App.js","index.js"],"names":["Opening","props","react_default","a","createElement","className","onClick","event","start","Questions","numberOfQuestions","_React$useState","React","useState","_React$useState2","Object","slicedToArray","resetButton","setResetButton","_React$useState3","_React$useState4","checkAnswers","setCheckAnswers","_React$useState5","_React$useState6","triviaData","setTriviaData","_React$useState7","toConsumableArray","Array","keys","map","_React$useState8","userAnswers","setUserAnswers","_React$useState9","_React$useState10","correctAnswers","setCorrectAnswers","Parser","str","DOMParser","parseFromString","documentElement","textContent","SelectAnswer","_event$target","target","id","value","prevUserAnswers","answer","index","undefined","Score","concat","filter","idx","length","useEffect","fetch","then","res","json","triviaApiData","results","result","nanoid","question","answers","incorrect_answers","correct_answer","sort","Math","random","correctAnswer","qOrA","item","itemIdx","choiceButtons","answerIdx","key","String","checkOrScore","console","log","App","startGame","setStartGame","Fragment","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.8347a4c7.chunk.js","sourcesContent":["import React from 'react'\n\nexport default function Opening(props) {\n  return (\n    <div className=\"openingDesign\">\n      <div className=\"headerTextContainer\">\n\n        <p className=\"headerTitle\">Quizzical</p>\n        <p className=\"subHeaderTitle\">how much do you know?</p>\n        \n        <button className=\"headerButton\"\n                onClick={(event) => props.start(event)}>\n                  Start quiz\n        </button>\n\n      </div>\n    </div>\n  )\n}","import React from 'react'\nimport { nanoid } from \"nanoid\"\n\nexport default function Questions() {\n\n  const numberOfQuestions = 5\n\n  const [resetButton, setResetButton] = React.useState(false)\n  const [checkAnswers, setCheckAnswers] = React.useState(false)\n  const [triviaData, setTriviaData] = React.useState([])\n  const [userAnswers, setUserAnswers] = React.useState(\n    [...Array(numberOfQuestions).keys()]\n    .map(() => undefined))\n  const [correctAnswers, setCorrectAnswers] = React.useState([])\n\n  React.useEffect(() => {\n    fetch(`https://opentdb.com/api.php?amount=${numberOfQuestions}&difficulty=easy`)\n      .then(res => res.json())\n      .then(triviaApiData => {\n\n        setTriviaData(\n          \n          triviaApiData.results.map((result) => {\n\n            return {\n              id: nanoid(),\n              question: Parser(result.question),\n              answers: \n                [\n                ...result.incorrect_answers.map((answer) => Parser(answer)), \n                Parser(result.correct_answer)\n                ]\n                .sort(() => Math.random() - 0.5),\n              correctAnswer: result.correct_answer,\n            }\n          })\n        )\n      })\n  }, [resetButton])\n\n  React.useEffect(() => {\n  },[correctAnswers])\n\n  function CheckAnswers() {\n    console.log(\"check answers click!\")\n    setCheckAnswers(true)\n    setCorrectAnswers(triviaData.map((question) => question.correctAnswer))\n  }\n\n  function Reset() {\n    setResetButton(() => !resetButton)\n    setCheckAnswers(false)\n    setUserAnswers([...Array(numberOfQuestions).keys()])\n  }\n  \n  function Parser(str) {\n    return new DOMParser().parseFromString(str, \"text/html\")\n    .documentElement.textContent\n  }\n\n  function SelectAnswer(event) {\n    const {id, value} = event.target\n    setUserAnswers((prevUserAnswers) => {\n       return prevUserAnswers.map((answer, index) => {\n         if (+id === index) {\n           if (answer === undefined) {\n             return Parser(value)\n           } else if (value !== answer) {\n             return Parser(value)\n           } else if (value === answer) {\n             return undefined\n           } else {\n             return undefined\n           }\n         } else {\n           return answer\n         }\n      })\n    })\n  }\n\n  function Score() {\n    return (\n    <div className=\"score\">\n      {`You scored ${userAnswers.filter((answer, idx) => \n      (answer === correctAnswers[idx])).length}/${numberOfQuestions} correct answers`}\n    </div>\n    )\n  }\n\n  const qOrA = !checkAnswers ?\n\n    triviaData.map((item, itemIdx) => {\n      const choiceButtons = item.answers.map((answer, answerIdx) => {\n        \n        return answer === userAnswers[itemIdx]\n        ?\n          <button onClick={SelectAnswer}\n                  key={String(itemIdx) + String(answerIdx)}\n                  id={itemIdx}\n                  value={answer}\n                  className=\"choiceButton selected\">\n                    {answer}\n          </button>\n        :\n          <button onClick={SelectAnswer}\n                  key={String(itemIdx) + String(answerIdx)}\n                  id={itemIdx}\n                  value={answer}\n                  className=\"choiceButton\">\n                    {answer}\n          </button>\n      })\n      return (\n        <div key={nanoid()} className=\"questionRow\">\n          <div className=\"question\">{`${item.question}`}</div>\n          <div className=\"choices\">\n            {choiceButtons}\n          </div>\n        </div>\n      )\n    })\n\n    :\n\n    triviaData.map((item, itemIdx) => {\n      const choiceButtons = item.answers.map((answer, answerIdx) => {\n\n        if (answer === userAnswers[itemIdx] && userAnswers[itemIdx] !== correctAnswers[itemIdx]) {\n          return (\n          <button\n                  key={String(itemIdx) + String(answerIdx)}\n                  id={itemIdx}\n                  value={answer}\n                  className=\"choiceButton incorrectAnswer\">\n                    {answer}\n          </button>\n          )\n        } else if (answer === correctAnswers[itemIdx]) {\n          return (\n          <button \n                  key={String(itemIdx) + String(answerIdx)}\n                  id={itemIdx}\n                  value={answer}\n                  className=\"choiceButton correctAnswer\">\n                    {answer}\n          </button>\n          )\n        } else {\n          return (\n          <button \n                  key={String(itemIdx) + String(answerIdx)}\n                  id={itemIdx}\n                  value={answer}\n                  className=\"choiceButton\">\n                    {answer}\n          </button>\n          )\n        }\n      })\n      return (\n        <div key={nanoid()} className=\"questionRow\">\n          <div className=\"question\">{`${item.question}`}</div>\n          <div className=\"choices\">\n            {choiceButtons}\n          </div>\n        </div>\n      )\n    })\n  \n  const checkOrScore = !checkAnswers\n  ?\n  <button onClick={CheckAnswers} className=\"checkButton\">Check Answers</button>\n  :\n  <Score />\n\n  return (\n  <div>\n    <div className=\"questionsBackground\">\n      <div className=\"questionParts\">\n        {qOrA}\n        <div className=\"checkButtonContainer\">\n          {checkOrScore}\n          <button onClick={Reset}\n                  className=\"checkButton\">\n                    New Quiz\n          </button>\n        </div>\n      </div>\n    </div>\n  </div>\n  )\n}","import React from 'react'\nimport \"./style.css\"\nimport Opening from './components/opening'\nimport Questions from './components/questions'\n\nexport default function App() {\n\n  const [startGame, setStartGame] = React.useState(false)\n\n  function Start() {\n    setStartGame(true)\n  }\n\n  return (\n    <>\n      <main className=\"outerBorder\">\n        {!startGame\n        ?\n        <Opening start={Start}/>\n        :\n        <Questions />}\n      </main>\n    </>\n  )\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport App from './App';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);"],"sourceRoot":""}